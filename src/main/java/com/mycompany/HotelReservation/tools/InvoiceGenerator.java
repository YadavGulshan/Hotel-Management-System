package com.mycompany.HotelReservation.tools;

import com.itextpdf.text.Font;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Date;


public class InvoiceGenerator {
    private static int Userid;
    private static String Username ;
    private static long UserPhone;
    private static String UserEmail;


    // Room Details var
    private static int RoomNumber;
    private static String RoomType;
    private static String BedType;
    private static int CalculatedPrice ;

    // Check in and out details
    private static String UserCheckinDetails;
    private static String UserCheckOutDetails;



    // Fonts
    private static final Font boldFont = new Font(Font.FontFamily.TIMES_ROMAN, 20,
            Font.BOLD);
    private static final Font normalFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
    private static final Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 14,
            Font.BOLD);


    // Constructor.
    public InvoiceGenerator(int id,
                            String Name,
                            long Phone,
                            String Email,
                            int Room,
                            String Type,
                            String Bed,
                            int Price,
                            String CheckinDetails,
                            String CheckOutDetails
    ) throws Exception {
        Userid = id;
        Username = Name;
        UserEmail = Email;
        UserPhone = Phone;
        RoomNumber = Room;
        RoomType = Type;
        BedType = Bed;
        CalculatedPrice = Price;
        UserCheckinDetails = CheckinDetails;
        UserCheckOutDetails = CheckOutDetails;
        main();
    }


    public static void main() throws Exception{
            Document document = new Document();
        final String PATH = "out/invoices/"+Userid+".pdf";
        final File FILE = new File(PATH);
        try
        {
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            // Add MetaData.
            addMetaData(document);
            // Add the title.
            addTitle(document);
            addEmptyLine(document, 2);

            // Add Body
            addBody(document);


            // Spacing for table
            addEmptyLine(document, 2);
            addBorder(document);
            addEmptyLine(document, 2);


            // Add table
            addTable(document);
            addEmptyLine(document, 1);
            addBorder(document);

            // Add footer
            addFooter(document);

            document.close();
            System.out.println("Invoice Generated!");


            // Open file
            if (!Desktop.isDesktopSupported()){
                System.out.println("System not supported!");
                return;
            }
            Desktop desktop = Desktop.getDesktop();
            if(FILE.exists()){
                desktop.open(FILE);
            } else {
                System.out.println("File Does not exists!");
            }
//            return;
        } catch (DocumentException | FileNotFoundException e) {
            e.printStackTrace();
        }


    }

    public static void addMetaData(Document document) {
        document.addAuthor("Gulshan Yadav");
        document.addCreator("Hotelopedia");
        document.addTitle("Invoice");
    }

    public static void addTitle(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();

        // Header for pdf
        preface.add(new Paragraph("HoteloPedia", boldFont));
        preface.add(new Paragraph(
                "Invoice generated by: " + System.getProperty("user.name") + ", " + new Date(),
                normalFont));

       document.add(preface);
    }

    public static void addBody(Document document) throws DocumentException{
        //Invoice details
        Paragraph preface = new Paragraph();
        try{
            preface.add(new Paragraph("ID: "+ Userid, subFont));
            preface.add(new Paragraph("Name: "+ Username,subFont));
            preface.add(new Paragraph("Phone: "+ UserPhone,subFont));
            preface.add(new Paragraph("Email: "+ UserEmail,subFont));
            preface.add(new Paragraph("Room Number: "+ RoomNumber,subFont));
            preface.add(new Paragraph("Room Type: "+ RoomType,subFont));
            preface.add(new Paragraph("Bed Type: "+ BedType,subFont));
            preface.add(new Paragraph("Total Bill: "+ CalculatedPrice,subFont));

            // Add the data to pdf
            document.add(preface);
        }
        catch (DocumentException e){
            e.printStackTrace();
        }
    }

    public  static  void addFooter(Document document) throws DocumentException{
        Paragraph preface = new Paragraph();
        try{
            addEmptyLine(document, 10);
            preface.add(new Paragraph("Nice to meet you!"));

            document.add(preface);
        }catch (DocumentException e){
            e.printStackTrace();
        }

    }

    public static  void addTable(Document document ) throws DocumentException{

        PdfPTable table = new PdfPTable(3);

        try{
            // Cells here
            PdfPCell cell;

            // Checkin Title
            cell = new PdfPCell(new Phrase("Check In Date"));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            // Out Title
            cell= new PdfPCell(new Phrase("Check Out Date"));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            // Total title
            cell = new PdfPCell(new Phrase("Total"));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(cell);

            // Set the cell as header
            table.setHeaderRows(1);

            // Data here
            PdfPCell dataCell;

            dataCell = new PdfPCell(new Phrase(UserCheckinDetails));
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(dataCell);


            dataCell = new PdfPCell(new Phrase(UserCheckOutDetails));
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(dataCell);

            dataCell = new PdfPCell(new Phrase(String.valueOf(CalculatedPrice)));
            dataCell.setHorizontalAlignment(Element.ALIGN_CENTER);
            table.addCell(dataCell);
//                table.addCell(String.valueOf(CalculatedPrice));

            document.add(table);
        } catch (DocumentException e){
            e.printStackTrace();
        }
    }

    private static void addEmptyLine(Document document, int number) throws DocumentException {
        Paragraph preface = new Paragraph();

        for (int i= 0; i<number;i++){
            preface.add(new Paragraph(" "));
        }
        preface.add(new Paragraph());
        document.add(preface);
    }

    private  static void addBorder(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();
        // TODO : Add the borders.
        preface.add(new Paragraph("-".repeat(125)));
        document.add(preface);
    }

}
